- name: Upgrade postgres
  hosts: all
  become: yes
  vars:
    psql_version: 14
    psql_port: "6432"
    temp_upgrade_port: "6433"
    orignal_cluster: 9.6
    restart_hosts: True
    ANSIBLE_JINJA2_NATIVE: true
    temp_path: "/data-postgres-14/"
    path: "/data-postgres/"
  tasks:
    - name: Region
      debug:
        msg: "Instance ID: {{instance_id}}"

    - name: Basic AMI Creation and waiting async#
      amazon.aws.ec2_ami:
        instance_id: "{{ instance_id }}"
        wait: no
        name: "Update_postgres_{{ inventory_hostname_short }}_{{ansible_date_time.iso8601_basic_short}}"
        no_reboot: yes
        region: "us-west-2" # if we every do multi region I applogies
        tags:
          Name: "Update_{{ inventory_hostname_short }}_{{ansible_date_time.iso8601_basic_short}}"
          Source_Instance: "{{ instance_id }}"
          DeleteAfter: "{{ '%Y-%m-%d' | strftime( ( ansible_date_time.epoch | int ) + ( 86400 * 7 )  ) }}"
      # when: "tags.Role in ['Database']"
      tags:
        - postgres

    - ec2_vol_info:
        filters:
          attachment.status: attached
          attachment.device: "/dev/sdp"
          attachment.instance-id: "{{ instance_id }}"
        region: "us-west-2"
      register: volumes
      when: "tags.Role in ['Database']"
      tags:
        - postgres

    - name: debug volumes
      debug:
        msg: "{{ volumes.volumes }}"
      when: "tags.Role in ['Database']"
      tags:
        - postgres

    - name: Create new volume
      amazon.aws.ec2_vol:
        instance: "{{ instance_id }}"
        volume_size: "{{ volumes.volumes[0].size }}"
        device_name: /dev/sdn
        volume_type: gp3
        region: us-west-2
        encrypted: true
        name: "{{inventory_hostname_short}}-postgres-14"
        kms_key_id: "arn:aws:kms:us-west-2:913835907225:key/cb2ca0a0-bece-4542-a97f-1b4894f73d65"
        zone:  "{{ volumes.volumes[0].zone }}"
      register: ebs
      when: "tags.Role in ['Database']"
      tags:
        - postgres

    - name: Create ext4 filesystem
      filesystem:
        fstype: ext4
        dev: /dev/sdn
      when: "tags.Role in ['Database']"
      tags:
        - postgres

    - name: mount /data-postgres-14
      become: yes
      ansible.posix.mount:
        path: "{{temp_path}}"
        src: /dev/sdn
        state: mounted
        fstype: ext4
        opts: defaults
      when: "tags.Role in ['Database']"
      tags:
        - postgres

    - name: Database Role pre Upgrade
      include_role:
        name:  databases
      when: "tags.Role in ['Database']"
      tags:
        - postgres
      vars:
        psql_port: "{{ temp_upgrade_port }}"
        location: "{{ temp_path }}"
        
    - name: Database Role pre Upgrade
      include_role:
        name:  logrotate
      when: "tags.Role in ['Database']"
      tags:
        - postgres


    - name: Webserver Role
      include_role:
        name:  webserver
      when: "tags.Role in ['Admin', 'Web', 'Nightly']"
      tags:
        - postgres

    - name: Stop service postgresql, if started
      ansible.builtin.service:
        name: postgresql
        state: stopped
      when: "tags.Role in ['Database']"
      tags:
        - postgres

    - name: Copy files from var-lib to /data-postgres-14
      copy: 
        remote_src: True 
        src: /var/lib/postgresql/14/main/
        dest: "{{temp_path}}"
      tags:
        - postgres
      when: "tags.Role in ['Database']"

    - name: Change file ownership, group and permissions
      ansible.builtin.file:
        path: "{{temp_path}}"
        owner: postgres
        group: postgres
        mode: '0700'
        recurse: true
      tags:
        - postgres
      when: "tags.Role in ['Database']"
 
    - name: Run pg_upgrade
      shell: >
        cd /tmp;
        /usr/lib/postgresql/{{psql_version}}/bin/pg_upgrade 
        --retain
        -b /usr/lib/postgresql/{{orignal_cluster}}/bin
        -B /usr/lib/postgresql/{{psql_version}}/bin
        -d /data-postgres/
        -D {{ temp_path }}
        -o "-c config_file=/etc/postgresql/{{orignal_cluster}}/main/postgresql.conf"
        -O "-c config_file=/etc/postgresql/{{psql_version}}/main/postgresql.conf"
        -p {{ psql_port }}
        -P {{ temp_upgrade_port }}  | tee -a /tmp/pg_upgrade.log
      become_user: postgres
      async: 36000
      poll: 10
      tags:
        - postgres
      register: pg_upgrade_output
      when: "tags.Role in ['Database']"

    - debug: msg="{{ pg_upgrade_output }}"
      tags:
        - postgres
    
    - name: Start service postgresql
      ansible.builtin.service:
        name: postgresql
        state: started
      tags:
        - postgres
      when: "tags.Role in ['Database']"
    
    - name: Update exentions
      shell: |
        cat /tmp/update_extensions.sql | psql -p {{ temp_upgrade_port }}
      become_user: postgres
      tags:
        - postgres
      when: "tags.Role in ['Database']"
      register: pg_extention_output

    - debug: msg="{{ pg_extention_output }}"
      tags:
        - postgres
     
    - name: Run Vacumm
      shell: |
        /usr/lib/postgresql/{{psql_version}}/bin/vacuumdb --all --analyze-in-stages -p {{ temp_upgrade_port }}
      register: pg_vacumm_output
      become_user: postgres
      become: yes
      async: 3600
      poll: 10
      tags:
        - postgres
      when: "tags.Role in ['Database']"
      ignore_errors: yes 

    - debug: msg="{{ pg_vacumm_output }}"
      tags:
        - postgres
  
    - name: Stop service postgresql to move around data volumes
      ansible.builtin.service:
        name: postgresql
        state: stopped
      when: "tags.Role in ['Database']"
      tags:
        - postgres

    - name: Remove a list of packages
      apt:
        pkg:
          - postgresql-{{ orignal_cluster }}
          - postgresql-contrib-{{ orignal_cluster }}
          - postgresql-client-{{ orignal_cluster }}
          - postgresql-plperl-{{ orignal_cluster }}
        state: absent
      tags:
        - postgres
      when: "tags.Role in ['Database']"

    # REMOVE old volume - mount NEW volume to /data-postgres
    - name: unmount /data-postgres
      become: yes
      ansible.posix.mount:
        path: "/data-postgres"
        src: LABEL=postgres-vol
        fstype: ext4
        opts: defaults
        state: absent
      when: "tags.Role in ['Database']"
      tags:
        - postgres

    - name: detatch original volume (/data-postgres)
      amazon.aws.ec2_vol:
        id: "{{ volumes.volumes[0].id }}"
        instance: None
        region: us-west-2
      when: "tags.Role in ['Database']"
      tags:
        - postgres

    - name: unmount /data-postgres-14
      become: yes
      ansible.posix.mount:
        path: "{{temp_path}}"
        src: /dev/sdn
        state: absent
        fstype: ext4
        opts: defaults
      when: "tags.Role in ['Database']"
      tags:
        - postgres

    - name: detatch new volume (/data-postgres-14)
      amazon.aws.ec2_vol:
        id: "{{ ebs.volume_id }}"
        instance: None
        region: us-west-2
      when: "tags.Role in ['Database']"
      tags:
        - postgres

    - name: attach new volume as /dev/sdp
      amazon.aws.ec2_vol:
        instance: "{{ instance_id }}"
        id: "{{ ebs.volume_id }}"
        device_name: /dev/sdp
        region: us-west-2
      when: "tags.Role in ['Database']"
      register: ebs_reattachment
      tags:
        - postgres

    - name: debug reattachment
      debug:
        msg: "{{ ebs_reattachment }}"
      when: "tags.Role in ['Database']"
      tags:
        - postgres

    - name: Pause for 1 minute to wait for linux to detect it
      pause:
        minutes: 1
      tags:
        - postgres

    # ToDo: see if this works going forward
    - name: label the drive 
      shell: /sbin/e2label {{ebs_reattachment.device}} postgres-vol
      become: yes
      when: "tags.Role in ['Database']"
      tags:
        - postgres

    - name: Mount the device
      ansible.posix.mount:
        path: "/data-postgres"
        src: LABEL=postgres-vol
        fstype: ext4
        state: mounted
        opts: defaults
      become: yes
      when: "tags.Role in ['Database']"
      tags:
        - postgres


    - name: Database Role post Upgrade
      include_role:
        name:  databases
      when: "tags.Role in ['Database']"
      tags:
        - postgres
      ignore_errors: yes

    - name: Start service postgresql
      ansible.builtin.service:
        name: postgresql
        state: started
      tags:
        - postgres
      when: "tags.Role in ['Database']"
   
    - name: Cloudwatch Log reconfigure
      include_role:
        name:  logrotate
      when: "tags.Role in ['Database']"
      tags:
        - postgres
      vars:
        psql_version: 14
    
    # tried not sure why this won't work so lets just run this manually 
    - name: restart everything
      include_role:
        name: restart_OS_restart_services    
      tags:
        - postgres
      vars:
        restart_hosts: true